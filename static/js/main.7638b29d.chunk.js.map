{"version":3,"sources":["components/IconRender/IconRender.jsx","components/Navbars/Navbars.jsx","App.js","serviceWorker.js","index.js"],"names":["IconRender","props","react_default","a","createElement","lib","m","l","s","onClick","clickHandler","icon","iconName","className","correct","textClassName","react_fontawesome_index_es","spin","Navbars","window","clearTimeout","this","timeout","gameWon","message","clear","arguments","length","undefined","setTimeout","renderMessage","key","Math","random","brand","right","score","highScore","Component","App","state","icons","faDharmachakra","faSnowflake","faCertificate","faAtom","faAsterisk","faSun","faCog","faCompass","faCrosshairs","faHaykal","faPalette","faRing","sort","_this","shuffle","clicked","b","indexOf","concat","Object","toConsumableArray","setState","max","_this2","components_Navbars_Navbars","transparent","map","components_IconRender_IconRender","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7638b29d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Col, Card } from \"react-materialize\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport \"./IconRender.css\";\n\n\n\nconst IconRender = (props) => (\n    <Col m={4} l={3} s={12}>\n    <Card onClick={() => props.clickHandler(props.icon.iconName)} className={\"hoverable teal lighten-2 black-text center\" + (props.correct === false ? \" shake\" : \"\")} textClassName='white-text'>\n    <FontAwesomeIcon className=\"myFont\" icon={props.icon} spin/>\n    </Card>\n</Col>\n);\n\n export default IconRender","import React, { Component } from \"react\";\nimport { Navbar, NavItem } from \"react-materialize\";\nimport \"./Navbars.css\";\n\nclass Navbars extends Component {\n  componentWillUnmount() {\n    window.clearTimeout(this.timeout);\n  }\n\n  renderMessage(correct, gameWon, clear = false) {\n    let message, className;\n    if (clear) {\n      className = \"\";\n    } else if (correct === undefined) {\n      message = \"Click an image to begin\";\n      className = \"\";\n    } else {\n      message = gameWon\n        ? \"You won the game!!!\"\n        : correct\n        ? \"You guessed correctly!\"\n        : \"You guessed incorrectly\";\n      className = correct ? \"correct\" : \"incorrect\";\n    }\n\n    window.clearTimeout(this.timeout);\n    if (!clear & (correct !== undefined)) {\n      this.timeout = window.setTimeout(\n        this.renderMessage,\n        gameWon ? 3000 : 1000,\n        gameWon ? undefined : correct,\n        false,\n        true\n      );\n    }\n    return (\n      <li key={Math.random()} className={className}>\n        {message}\n      </li>\n    );\n  }\n\n  render() {\n    return (\n      <Navbar className=\"nav-comp\" brand=\"Clicky Game\" right>\n      {this.renderMessage(this.props.correct,this.props.gameWon)}\n        <NavItem className=\"nav-list\"> Score{this.props.score}: | High Score:{this.props.highScore}</NavItem>\n      </Navbar>\n    );\n  }\n}\n\nexport default Navbars;\n","import React, { Component } from 'react';\nimport {Row, Card, Col} from 'react-materialize'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDharmachakra,faSnowflake,faCertificate,faAtom,faAsterisk,faSun,faCog,faCompass,faCrosshairs,faHaykal,faPalette,faRing } from '@fortawesome/free-solid-svg-icons'\nimport IconRender from './components/IconRender/IconRender'\nimport Navbars from './components/Navbars/Navbars'\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    icons:[faDharmachakra,faSnowflake,faCertificate,faAtom,faAsterisk,faSun,faCog,faCompass,faCrosshairs,faHaykal,faPalette,faRing].sort(this.shuffle),\n    clicked:[],\n    correct: undefined,\n    score: 0,\n    highScore: 0,\n    gameWon: false\n\n  }\n\n  shuffle = (a,b) => Math.random() < 0.5 ? 1 : -1\n\n  clickHandler = iconName => {\n    if (this.state.clicked.indexOf(iconName) === -1) {\n        let score = this.state.clicked.length + 1,\n            clicked = score === this.state.icons.length ? [] : [...this.state.clicked, iconName]\n\n        this.setState({\n            icons: this.state.icons.sort(this.shuffle),\n            clicked: clicked,\n            score: score,\n            highScore: Math.max(this.state.highScore, score),\n            correct: true,\n            gameWon: score === this.state.icons.length\n        })\n    } else {\n        this.setState({\n            icons: this.state.icons.sort(this.shuffle),\n            clicked: [],\n            score: 0,\n            correct: false,\n            gameWon: false\n        })\n    }\n}\n\n  render() {\n    return (\n      <div>\n        <div className=\"container-fluid nav-class\">\n        <Navbars correct={this.state.correct} gameWon={this.state.gameWon} score={this.state.score} highScore={this.state.highScore}/>\n        <Row>\n          <Col s={12} m={12}>\n          <Card className=\"card-instr\" textClassName='red-text' transparent>\n          <p >Score up by clicking on the image but only once</p>\n          </Card>\n          </Col>\n        </Row>\n        </div>\n        <div className=\"container center icon-class\">\n        <Row>\n          {this.state.icons.map(icon=>(<IconRender correct={this.state.correct} key={icon.iconName} icon={icon} clickHandler={this.clickHandler}></IconRender>))}\n        </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}